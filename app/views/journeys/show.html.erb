<script src="//maps.google.com/maps/api/js?v=3.13&amp;sensor=true&amp;libraries=geometry" type="text/javascript"></script>
<script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js' type='text/javascript'></script>
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&libraries=places"></script>

<div id="map" class="gmaps4rails_map"></div>
<div class="center">
  <h1 id='journey-title'> <%= @journey.title %> </h1>
</div>
<div id='new_stop-link_group'>
  <%= image_tag "circle_plus.png", alt: "+", height: "24", width: "24", id: 'create_new_stop-img' %>
  <p id='new_stop-link'> New Stop </p>
  <br/>
  <input id="pac-input" type="text" placeholder="Search Location">
</div>

<script type="text/javascript" charset='utf-8'>

function initialize() {

$(document).on('map:ready', function () {
  $.each(Gmaps.map.markers, function (index, m) {
    var marker = m.serviceObject;
    m.infowindow.open(marker.map, marker);
  })
});

  //Custom map
  var mapStyle = [
    {
        "featureType": "water",
        "elementType": "geometry",
        "stylers": [
            { "hue": "#0e0e0e" },
            { "saturation": -100 },
            { "lightness": -100 },
            { "visibility": "on" }
        ]
    },
    {
        "featureType": "water",
        "elementType": "labels",
        "stylers": [
            { "hue": "#e9ecec" },
            { "saturation": 100 },
            { "lightness": 100 },
            { "visibility": "on" }
        ]
    },
    {
        "featureType": "landscape",
        "elementType": "all",
        "stylers": [
            { "hue": "#ffdfa6" },
            { "saturation": 100 },
            { "lightness": -4 },
            { "visibility": "on" }
        ]
    },
    {
        "featureType": "poi",
        "elementType": "geometry",
        "stylers": [
            { "hue": "#635641" },
            { "saturation": 100 },
            { "lightness": 0 },
            { "visibility": "on" }
        ]
    },
    {
        "featureType": "road",
        "elementType": "all",
        "stylers": [
            { "hue": "#777777" },
            { "saturation": -100 },
            { "lightness": -6 },
            { "visibility": "on" }
        ]
    },
    {
        "featureType": "administrative",
        "elementType": "all",
        "stylers": [
            { "hue": "#005d8b" },
            { "saturation": 100 },
            { "lightness": -22 },
            { "visibility": "on" }
        ]
    },
    {
        "featureType": "transit",
        "elementType": "all",
        "stylers": [
            { "hue": "#444444" },
            { "saturation": 0 },
            { "lightness": -64 },
            { "visibility": "off" }
        ]
    },
    {
        "featureType": "poi",
        "elementType": "labels",
        "stylers": [
            { "hue": "#38cc6d" },
            { "saturation": 100 },
            { "lightness": -22 },
            { "visibility": "on" }
        ]
    }
  ];

var map = Gmaps.build('Google');
map.buildMap({
    internal: {id: 'map'},
    provider: {
      zoom:      2,
      minZoom:   2,
      // maxZoom:   16,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      styles:    mapStyle
    }
  },
  function(){
    markers = map.addMarkers(<%=raw @hash.to_json %>);
    map.bounds.extendWith(markers);
    map.fitMapToBounds();
    if(markers.length === 1) {
      map.getMap().setZoom(15);
    }
  });

  // Create the search box and link it to the UI element.
  var input = /** @type {HTMLInputElement} */(
      document.getElementById('pac-input'));
  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  var searchBox = new google.maps.places.SearchBox(
    /** @type {HTMLInputElement} */(input));

  var search_markers = [];
  var infowindows = [];

  // Listen for the event fired when the user selects an item from the
  // pick list. Retrieve the matching places for that item.
  google.maps.event.addListener(searchBox, 'places_changed', function() {
    var places = searchBox.getPlaces();

    $.each(infowindows, function (index, infowindow) {
      infowindow.close();
    });

    map.removeMarkers(search_markers);

    search_markers = [];
    infowindow = [];

    // For each place, get the icon, place name, and location.
    for (var i = 0, place; place = places[i]; i++) {

      var path = window.location.pathname + '/stops/new?loc='
        + place.name + '&lat=' + place.geometry.location.lat()
        + '&lng=' + place.geometry.location.lng();
      var infowindow_content = "<div class='infowindow'><a href=" +
        path +">Create stop here?</a>" +
        "<p>(Click and drag if incorrectly placed" +
        "<br/> or enter a new search)</p></div>"

      var search_marker = new google.maps.Marker({
        lat: place.geometry.location.lat(),
        lng: place.geometry.location.lng(),
        infowindow: infowindow_content,
        map: map.getMap()
    });

      infowindows.push(new google.maps.InfoWindow({
        content: "<div id='id_" + place.name + "' class='infowindow'><a href="
          + path + ">Create stop here?</a><p>(Click and drag if "
          + "incorrectly placed <br/> or enter a new search)</p></div>",
        pixelOffset: new google.maps.Size(0, -40)
      }));

      var search_marker = map.addMarker(search_marker, {draggable: true});

      infowindows[i].setPosition(place.geometry.location);
      infowindows[i].open(map.getMap());

      search_markers.push(search_marker);
    }

      if(places.length === 1) {
        map.getMap().setCenter(places[0].geometry.location);
        map.getMap().setZoom(16);
      } else {
        map.bounds.extendWith(search_markers);
        map.fitMapToBounds();
      }
  });

  // Bias the SearchBox results towards places that are within the bounds of
  // the current map's viewport.
  google.maps.event.addListener(map, 'bounds_changed', function() {
    var bounds = map.getBounds();
    searchBox.setBounds(bounds);
  });
}

google.maps.event.addDomListener(window, 'load', initialize);




</script>